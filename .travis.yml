language: python

matrix:
  include:
  - os: osx
    osx_image: xcode10.2
    language: shell
    env: PYTHON=3.6
  
  - os: osx
    osx_image: xcode10.2
    language: shell
    env: PYTHON=3.7
  
  - os: osx
    osx_image: xcode10.2
    language: shell
    env: PYTHON=3.8

  - os: linux
    language: generic
    env: PYTHON=3.6
    services: docker
  
  - os: linux
    language: generic
    env: PYTHON=3.7
    services: docker
  
  - os: linux
    language: generic
    env: PYTHON=3.8
    services: docker

  - os: windows
    language: shell
    before_install:
      - choco install python --version 3.6.0
      - export PATH="/c/Python36:/c/Python38/Scripts:$PATH"
      # make sure it's on PATH as 'python3'
      - ln -s /c/Python36/python.exe /c/Python36/python3.exe

  - os: windows
    language: shell
    before_install:
      - choco install python --version 3.7.0
      - export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
      # make sure it's on PATH as 'python3'
      - ln -s /c/Python37/python.exe /c/Python37/python3.exe

  - os: windows
    language: shell
    before_install:
      - choco install python --version 3.8.0
      - export PATH="/c/Python38:/c/Python38/Scripts:$PATH"
      # make sure it's on PATH as 'python3'
      - ln -s /c/Python38/python.exe /c/Python38/python3.exe

before_install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then wget http://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
    else wget http://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; fi
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - conda create -q -n test-environment python=$PYTHON numpy scipy
  - source activate test-environment
  - pip install -r dev-requirements.txt

install:
  - python -m pip install cibuildwheel==1.6.2
  - python setup.py install

script:
  - python setup.py test
  - python -m cibuildwheel --output-dir wheelhouse

after_success:
  # if the release was tagged, upload them to PyPI
  - |
    if [[ $TRAVIS_TAG ]]; then
      python -m pip install twine
      python -m twine upload wheelhouse/*.whl
    fi
